package com.yuen.domain;
// Generated Jan 30, 2018 8:45:22 PM by Hibernate Tools 5.0.6.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "mycontact")
public class Question implements java.io.Serializable {

	private Integer questionId;
	private BloomLevel bloomLevel;
	private QuestionTypeDict questionTypeDict;
	private User user;
	private String questionDesc;
	private boolean questionInTest;
	private Set<QuestionItem> questionItems = new HashSet<QuestionItem>(0);
	private Set<QgroupQuestionMap> qgroupQuestionMaps = new HashSet<QgroupQuestionMap>(0);
	private Set<QuestionComment> questionComments = new HashSet<QuestionComment>(0);
	private Set<QuestionTakerComment> questionTakerComments = new HashSet<QuestionTakerComment>(0);
	private Set<QuestionTopicMap> questionTopicMaps = new HashSet<QuestionTopicMap>(0);
	private Set<QuestionContentMap> questionContentMaps = new HashSet<QuestionContentMap>(0);
	private Set<TestQuestionMap> testQuestionMapsForEditmodeQuestionId = new HashSet<TestQuestionMap>(0);
	private Set<QuestionAccessMode> questionAccessModes = new HashSet<QuestionAccessMode>(0);
	private Set<QuestionInfo> questionInfos = new HashSet<QuestionInfo>(0);
	private Set<QuestionCourseoutcomeMap> questionCourseoutcomeMaps = new HashSet<QuestionCourseoutcomeMap>(0);
	private Set<TakerSolution> takerSolutions = new HashSet<TakerSolution>(0);
	private Set<Qsolution> qsolutions = new HashSet<Qsolution>(0);
	private Set<TestQuestionMap> testQuestionMapsForTestmodeQuestionId = new HashSet<TestQuestionMap>(0);

	public Question() {
	}

	public Question(BloomLevel bloomLevel, QuestionTypeDict questionTypeDict, boolean questionInTest) {
		this.bloomLevel = bloomLevel;
		this.questionTypeDict = questionTypeDict;
		this.questionInTest = questionInTest;
	}

	public Question(BloomLevel bloomLevel, QuestionTypeDict questionTypeDict, User user, String questionDesc,
			boolean questionInTest, Set<QuestionItem> questionItems, Set<QgroupQuestionMap> qgroupQuestionMaps,
			Set<QuestionComment> questionComments, Set<QuestionTakerComment> questionTakerComments,
			Set<QuestionTopicMap> questionTopicMaps, Set<QuestionContentMap> questionContentMaps,
			Set<TestQuestionMap> testQuestionMapsForEditmodeQuestionId, Set<QuestionAccessMode> questionAccessModes,
			Set<QuestionInfo> questionInfos, Set<QuestionCourseoutcomeMap> questionCourseoutcomeMaps,
			Set<TakerSolution> takerSolutions, Set<Qsolution> qsolutions,
			Set<TestQuestionMap> testQuestionMapsForTestmodeQuestionId) {
		this.bloomLevel = bloomLevel;
		this.questionTypeDict = questionTypeDict;
		this.user = user;
		this.questionDesc = questionDesc;
		this.questionInTest = questionInTest;
		this.questionItems = questionItems;
		this.qgroupQuestionMaps = qgroupQuestionMaps;
		this.questionComments = questionComments;
		this.questionTakerComments = questionTakerComments;
		this.questionTopicMaps = questionTopicMaps;
		this.questionContentMaps = questionContentMaps;
		this.testQuestionMapsForEditmodeQuestionId = testQuestionMapsForEditmodeQuestionId;
		this.questionAccessModes = questionAccessModes;
		this.questionInfos = questionInfos;
		this.questionCourseoutcomeMaps = questionCourseoutcomeMaps;
		this.takerSolutions = takerSolutions;
		this.qsolutions = qsolutions;
		this.testQuestionMapsForTestmodeQuestionId = testQuestionMapsForTestmodeQuestionId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "question_id", unique = true, nullable = false)
	public Integer getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(Integer questionId) {
		this.questionId = questionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "bloom_level_id", nullable = false)
	public BloomLevel getBloomLevel() {
		return this.bloomLevel;
	}

	public void setBloomLevel(BloomLevel bloomLevel) {
		this.bloomLevel = bloomLevel;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "question_type_id", nullable = false)
	public QuestionTypeDict getQuestionTypeDict() {
		return this.questionTypeDict;
	}

	public void setQuestionTypeDict(QuestionTypeDict questionTypeDict) {
		this.questionTypeDict = questionTypeDict;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "question_desc", length = 65535)
	public String getQuestionDesc() {
		return this.questionDesc;
	}

	public void setQuestionDesc(String questionDesc) {
		this.questionDesc = questionDesc;
	}

	@Column(name = "question_in_test", nullable = false)
	public boolean isQuestionInTest() {
		return this.questionInTest;
	}

	public void setQuestionInTest(boolean questionInTest) {
		this.questionInTest = questionInTest;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionItem> getQuestionItems() {
		return this.questionItems;
	}

	public void setQuestionItems(Set<QuestionItem> questionItems) {
		this.questionItems = questionItems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QgroupQuestionMap> getQgroupQuestionMaps() {
		return this.qgroupQuestionMaps;
	}

	public void setQgroupQuestionMaps(Set<QgroupQuestionMap> qgroupQuestionMaps) {
		this.qgroupQuestionMaps = qgroupQuestionMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionComment> getQuestionComments() {
		return this.questionComments;
	}

	public void setQuestionComments(Set<QuestionComment> questionComments) {
		this.questionComments = questionComments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionTakerComment> getQuestionTakerComments() {
		return this.questionTakerComments;
	}

	public void setQuestionTakerComments(Set<QuestionTakerComment> questionTakerComments) {
		this.questionTakerComments = questionTakerComments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionTopicMap> getQuestionTopicMaps() {
		return this.questionTopicMaps;
	}

	public void setQuestionTopicMaps(Set<QuestionTopicMap> questionTopicMaps) {
		this.questionTopicMaps = questionTopicMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionContentMap> getQuestionContentMaps() {
		return this.questionContentMaps;
	}

	public void setQuestionContentMaps(Set<QuestionContentMap> questionContentMaps) {
		this.questionContentMaps = questionContentMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "questionByEditmodeQuestionId")
	public Set<TestQuestionMap> getTestQuestionMapsForEditmodeQuestionId() {
		return this.testQuestionMapsForEditmodeQuestionId;
	}

	public void setTestQuestionMapsForEditmodeQuestionId(Set<TestQuestionMap> testQuestionMapsForEditmodeQuestionId) {
		this.testQuestionMapsForEditmodeQuestionId = testQuestionMapsForEditmodeQuestionId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionAccessMode> getQuestionAccessModes() {
		return this.questionAccessModes;
	}

	public void setQuestionAccessModes(Set<QuestionAccessMode> questionAccessModes) {
		this.questionAccessModes = questionAccessModes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionInfo> getQuestionInfos() {
		return this.questionInfos;
	}

	public void setQuestionInfos(Set<QuestionInfo> questionInfos) {
		this.questionInfos = questionInfos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<QuestionCourseoutcomeMap> getQuestionCourseoutcomeMaps() {
		return this.questionCourseoutcomeMaps;
	}

	public void setQuestionCourseoutcomeMaps(Set<QuestionCourseoutcomeMap> questionCourseoutcomeMaps) {
		this.questionCourseoutcomeMaps = questionCourseoutcomeMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<TakerSolution> getTakerSolutions() {
		return this.takerSolutions;
	}

	public void setTakerSolutions(Set<TakerSolution> takerSolutions) {
		this.takerSolutions = takerSolutions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<Qsolution> getQsolutions() {
		return this.qsolutions;
	}

	public void setQsolutions(Set<Qsolution> qsolutions) {
		this.qsolutions = qsolutions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "questionByTestmodeQuestionId")
	public Set<TestQuestionMap> getTestQuestionMapsForTestmodeQuestionId() {
		return this.testQuestionMapsForTestmodeQuestionId;
	}

	public void setTestQuestionMapsForTestmodeQuestionId(Set<TestQuestionMap> testQuestionMapsForTestmodeQuestionId) {
		this.testQuestionMapsForTestmodeQuestionId = testQuestionMapsForTestmodeQuestionId;
	}

}
